1. Since we deduce grid size by measuring the grid, the IN-GAME zoom function probably causes major issues
   Possible fix: deduce grid size by:
   - reading the puzzleInfo box (problem: won't work on daily/weekly puzzles since their box doesn't state dimensions)
   - counting the number of grid cells and taking square root (problem: won't work on non-square puzzles (none yet))
2. solver.js is too bloated
   Possible things to move:
   - grid reading into its own method/file
3. cannot trigger proper right-click event to pin cells
   Possible fix:
   - use WASD to navigate to it and Space to pin (requires triggering key presses to work, may require Tab first)
   - ignoring the issue and simply not pinning the cells at all (just arranging them correctly)
4. cannot triger LEFT-CLICK event to rotate cells, either
   Possible workaround:
   - highlight the cell, tell user what to do with it
   Possible alternative:
   - scrap this concept as an extension and turn it into a script of some kind?
5. tracking keyboard inputs to keep the internal board in sync might be hard, because the cursor has no DOM-visible presence I can see
   Possible hackaround:
   - track for keyboard inputs (at least rotate / pin) and have all cells re-check themselves when they happen
6. the check-ahead code for deciding whether a direction is connected/blocked in cells like elbow cells can infinite-loop if there is an entire wrapped row/column of them
   Possible fix:
   - when doing the look-ahead, mark cells that have been checked (and terminate if finding one again)
7. not 100% an 'issue', more of an 'unintuitive for user' matter: because of the look-ahead on connections (e.g. 'I know this elbow cell must have a connection this way because its opposite direction is blocked), the solver often solves things in an unintuitive manner, like solving a cell using look-ahead before solving the easy-to-solve elbow cell next to it
   Possible fix:
   - run a first run of solve attempts *without* look-ahead, and only try look-ahead if that fails?
   - some kind of special 'if we found a solution WITH look-ahead, check to make sure there isn't a more obvious one nearby' verification?
8. the cell listeners work 99% of the time, but occasionally the script-memory grid and the actual grid go out of sync by one click; exact bug goes as follows:
   - both pinning and rotating happen on mousedown; doing either individually is fine
   - pressing one button, then the other after a little while but before the first is released is still fine
     (e.g. left click down -> right click down -> right click up -> left click up)
   - pressing left click then right click very closely after is also fine (rotates, then pins)
   - the bug appears when PRESSING RIGHT CLICK, THEN LEFT CLICK VERY CLOSELY AFTER; when this happens, the game briefly pins the tile, then the pin is CANCELLED and the tile gets rotated (and remains unpinned); in this event, out model goes out of sync with the page, assuming that the tile got pinned (hence the rotation didn't happen); the bug also happens when the tile was initially pinned (similarly, our model assumes unpin -> rotate, while the page has the regular click cancel the right-click, meaning no pin and no rotate)
   Possible fix:
   - run a re-test of the board sometimes (whenever solving is 100% safe, but a bit excessive; rescanning the individual cell status after a listener trigger should also be safe-but-excessive; the most effective solution overall would probably be to specifically check for both mouse buttons in quick succession)
   Current fix:
   - currently we're just scanning before every solve, just in case